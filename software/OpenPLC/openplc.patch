diff --git a/webserver/active_program b/webserver/active_program
index 44b6177..79044c0 100755
--- a/webserver/active_program
+++ b/webserver/active_program
@@ -1 +1 @@
-blank_program.st
+145739.st
diff --git a/webserver/core/hardware_layers/raspberrypi.cpp b/webserver/core/hardware_layers/raspberrypi.cpp
index 5636e35..1bdbd79 100755
--- a/webserver/core/hardware_layers/raspberrypi.cpp
+++ b/webserver/core/hardware_layers/raspberrypi.cpp
@@ -28,8 +28,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
-#include <wiringPi.h>
-#include <wiringSerial.h>
+#include <pigpio.h>
 #include <pthread.h>
 
 #include "ladder.h"
@@ -39,9 +38,9 @@
     #define ARRAY_SIZE(x) (sizeof((x)) / sizeof((x)[0]))
 #endif
 
-#define MAX_INPUT 		14
-#define MAX_OUTPUT 		11
-#define MAX_ANALOG_OUT	1
+#define MAX_INPUT 		3
+#define MAX_OUTPUT 		4
+#define MAX_ANALOG_OUT	0
 
 /********************I/O PINS CONFIGURATION*********************
  * A good source for RaspberryPi I/O pins information is:
@@ -52,15 +51,15 @@
 ****************************************************************/
 //inBufferPinMask: pin mask for each input, which
 //means what pin is mapped to that OpenPLC input
-int inBufferPinMask[MAX_INPUT] = { 8, 9, 7, 0, 2, 3, 12, 13, 14, 21, 22, 23, 24, 25 };
+int inBufferPinMask[MAX_INPUT] = { 21, 1, 12};
 
 //outBufferPinMask: pin mask for each output, which
 //means what pin is mapped to that OpenPLC output
-int outBufferPinMask[MAX_OUTPUT] =	{ 15, 16, 4, 5, 6, 10, 11, 26, 27, 28, 29 };
+int outBufferPinMask[MAX_OUTPUT] =	{ 4, 8, 7, 20 };
 
 //analogOutBufferPinMask: pin mask for the analog PWM
 //output of the RaspberryPi
-int analogOutBufferPinMask[MAX_ANALOG_OUT] = { 1 };
+int analogOutBufferPinMask[MAX_ANALOG_OUT] = {  };
 
 //-----------------------------------------------------------------------------
 // This function is called by the main OpenPLC routine when it is initializing.
@@ -68,34 +67,30 @@ int analogOutBufferPinMask[MAX_ANALOG_OUT] = { 1 };
 //-----------------------------------------------------------------------------
 void initializeHardware()
 {
-	wiringPiSetup();
+	//wiringPiSetup();
+   	if (gpioInitialise() == PI_INIT_FAILED)
+   	{
+      	printf("ERROR: Failed to initialize the GPIO interface.\n");
+      	return 1;
+   	}
 	//piHiPri(99);
 
 	//set pins as input
 	for (int i = 0; i < MAX_INPUT; i++)
 	{
-	    if (pinNotPresent(ignored_bool_inputs, ARRAY_SIZE(ignored_bool_inputs), inBufferPinMask[i]))
-	    {
-		    pinMode(inBufferPinMask[i], INPUT);
-		    if (i != 0 && i != 1) //pull down can't be enabled on the first two pins
-		    {
-			    pullUpDnControl(inBufferPinMask[i], PUD_DOWN); //pull down enabled
-		    }
-	    }
+		gpioSetMode(inBufferPinMask[i], PI_INPUT);
 	}
 
 	//set pins as output
 	for (int i = 0; i < MAX_OUTPUT; i++)
 	{
-	    if (pinNotPresent(ignored_bool_outputs, ARRAY_SIZE(ignored_bool_outputs), outBufferPinMask[i]))
-	    	pinMode(outBufferPinMask[i], OUTPUT);
+		gpioSetMode(outBufferPinMask[i], PI_OUTPUT);
 	}
 
 	//set PWM pins as output
 	for (int i = 0; i < MAX_ANALOG_OUT; i++)
 	{
-	    if (pinNotPresent(ignored_int_outputs, ARRAY_SIZE(ignored_int_outputs), analogOutBufferPinMask[i]))
-    		pinMode(analogOutBufferPinMask[i], PWM_OUTPUT);
+		//TODO
 	}
 }
 
@@ -119,8 +114,10 @@ void updateBuffersIn()
 	//INPUT
 	for (int i = 0; i < MAX_INPUT; i++)
 	{
-	    if (pinNotPresent(ignored_bool_inputs, ARRAY_SIZE(ignored_bool_inputs), inBufferPinMask[i]))
-    		if (bool_input[i/8][i%8] != NULL) *bool_input[i/8][i%8] = digitalRead(inBufferPinMask[i]);
+		if (bool_input[i/8][i%8] != NULL)
+		{
+			*bool_input[i/8][i%8] = gpioRead(inBufferPinMask[i]) == PI_HIGH;
+		}
 	}
 
 	pthread_mutex_unlock(&bufferLock); //unlock mutex
@@ -138,15 +135,16 @@ void updateBuffersOut()
 	//OUTPUT
 	for (int i = 0; i < MAX_OUTPUT; i++)
 	{
-	    if (pinNotPresent(ignored_bool_outputs, ARRAY_SIZE(ignored_bool_outputs), outBufferPinMask[i]))
-    		if (bool_output[i/8][i%8] != NULL) digitalWrite(outBufferPinMask[i], *bool_output[i/8][i%8]);
+		if (bool_output[i/8][i%8] != NULL) 
+		{
+			gpioWrite(outBufferPinMask[i], *bool_output[i/8][i%8] ? PI_HIGH : PI_LOW);
+		}
 	}
 
 	//ANALOG OUT (PWM)
 	for (int i = 0; i < MAX_ANALOG_OUT; i++)
 	{
-	    if (pinNotPresent(ignored_int_outputs, ARRAY_SIZE(ignored_int_outputs), i))
-    		if (int_output[i] != NULL) pwmWrite(analogOutBufferPinMask[i], (*int_output[i] / 64));
+		//TODO
 	}
 
 	pthread_mutex_unlock(&bufferLock); //unlock mutex
diff --git a/webserver/scripts/compile_program.sh b/webserver/scripts/compile_program.sh
index 42d2127..43faa78 100755
--- a/webserver/scripts/compile_program.sh
+++ b/webserver/scripts/compile_program.sh
@@ -141,9 +141,9 @@ elif [ "$OPENPLC_PLATFORM" = "rpi" ]; then
     ./glue_generator
     echo "Compiling main program..."
     if [ "$OPENPLC_DRIVER" = "sequent" ]; then
-        g++ -DSEQUENT -std=gnu++11 *.cpp *.o -o openplc -I ./lib -lrt -lwiringPi -lpthread -fpermissive `pkg-config --cflags --libs libmodbus` -lasiodnp3 -lasiopal -lopendnp3 -lopenpal -w 
+        g++ -DSEQUENT -std=gnu++11 *.cpp *.o -o openplc -I ./lib -lrt -lpigpio -lpthread -fpermissive `pkg-config --cflags --libs libmodbus` -lasiodnp3 -lasiopal -lopendnp3 -lopenpal -w
     else    
-        g++ -std=gnu++11 *.cpp *.o -o openplc -I ./lib -lrt -lwiringPi -lpthread -fpermissive `pkg-config --cflags --libs libmodbus` -lasiodnp3 -lasiopal -lopendnp3 -lopenpal -w
+        g++ -std=gnu++11 *.cpp *.o -o openplc -I ./lib -lrt -lpigpio -lpthread -fpermissive `pkg-config --cflags --libs libmodbus` -lasiodnp3 -lasiopal -lopendnp3 -lopenpal -w
     fi
     if [ $? -ne 0 ]; then
         echo "Error compiling C files"
diff --git a/webserver/scripts/openplc_driver b/webserver/scripts/openplc_driver
index 055bd00..61aaae3 100755
--- a/webserver/scripts/openplc_driver
+++ b/webserver/scripts/openplc_driver
@@ -1 +1 @@
-blank_linux
+rpi
diff --git a/webserver/scripts/openplc_platform b/webserver/scripts/openplc_platform
index a08e1f3..61aaae3 100755
--- a/webserver/scripts/openplc_platform
+++ b/webserver/scripts/openplc_platform
@@ -1 +1 @@
-linux
+rpi
