###### Rule to alert for every package
alert ip any any -> any any (msg:"Anomal Network package detected"; dsize:>0; sid:100; rev:1;)

###### Rules to skip known packages, so only alert for anomalies will occur
## Modbus Traffic between hwio and openplc
pass tcp 172.18.0.2 any -> 172.18.0.3 502 (msg:"Modbus: hwio -> openplc request"; dsize:>0; sid:500; rev:1;)
pass tcp 172.18.0.3 502 -> 172.18.0.2 any (msg:"Modbus: openplc -> hwio response"; dsize:>0; sid:501; rev:1;)

## http Traffic between gateway (external client) and hwio
pass tcp 172.18.0.1 any -> 172.18.0.2 8090 (msg:"HTTP: CybICS hwio Webinterface request"; dsize:>0; sid:502; rev:1;)
pass tcp 172.18.0.2 8090 -> 172.18.0.1 any (msg:"HTTP: CybICS hwio Webinterface response"; dsize:>0; sid:503; rev:1;)

## Modbus Traffic between fuxa and openplc
pass tcp 172.18.0.4 any -> 172.18.0.3 502 (msg:"Modbus: fuxa -> openplc request"; dsize:>0; sid:504; rev:1;)
pass tcp 172.18.0.3 502 -> 172.18.0.4 any (msg:"Modbus: openplc -> fuxa response"; dsize:>0; sid:505; rev:1;)

## Modbus Traffic between opcua and openplc
pass tcp 172.18.0.5 any -> 172.18.0.3 502 (msg:"Modbus: opcua -> openplc request"; dsize:>0; sid:506; rev:1;)
pass tcp 172.18.0.3 502 -> 172.18.0.5 any (msg:"Modbus: openplc -> opcua response"; dsize:>0; sid:507; rev:1;)

## http Traffic between gateway (external client) and fuxa
pass tcp 172.18.0.1 any -> 172.18.0.4 1881 (msg:"HTTP: fuxa Webinterface request"; dsize:>0; sid:508; rev:1;)
pass tcp 172.18.0.4 1881 -> 172.18.0.1 any (msg:"HTTP: fuxa Webinterface response"; dsize:>0; sid:509; rev:1;)

## http Traffic between gateway (external client) and openplc
pass tcp 172.18.0.1 any -> 172.18.0.3 8080 (msg:"HTTP: openplc Webinterface request"; dsize:>0; sid:510; rev:1;)
pass tcp 172.18.0.3 8080 -> 172.18.0.1 any (msg:"HTTP: openplc Webinterface response"; dsize:>0; sid:511; rev:1;)






###### Default suricata Modbus rules
#
# Modbus Protocol version field is incorrect (Modbus version = 0)
#alert modbus any any -> any any (msg:"SURICATA Modbus invalid Protocol version"; app-layer-event:modbus.invalid_protocol_id; classtype:protocol-command-decode; sid:2250001; rev:2;)
# Response (answer) we didn't see a Request for. Could be packet loss.
#alert modbus any any -> any any (msg:"SURICATA Modbus unsolicited response"; app-layer-event:modbus.unsolicited_response; classtype:protocol-command-decode; sid:2250002; rev:2;)
# Malformed request or response. Malformed means length field is wrong
#alert modbus any any -> any any (msg:"SURICATA Modbus invalid Length"; app-layer-event:modbus.invalid_length; classtype:protocol-command-decode; sid:2250003; rev:2;)
# Modbus Function code is incorrect
#alert modbus any any -> any any (msg:"SURICATA Modbus invalid Function code"; app-layer-event:modbus.invalid_function_code; classtype:protocol-command-decode; sid:2250005; rev:2;)
# Modbus Request/Response value field is incorrect
#alert modbus any any -> any any (msg:"SURICATA Modbus invalid Value"; app-layer-event:modbus.invalid_value; classtype:protocol-command-decode; sid:2250006; rev:2;)
# Modbus Exception code is incorrect
#alert modbus any any -> any any (msg:"SURICATA Modbus Exception code invalid"; flow:to_client; app-layer-event:modbus.invalid_exception_code; classtype:protocol-command-decode; sid:2250007; rev:2;)
# Value field in Modbus Response does not match with Modbus Request
#alert modbus any any -> any any (msg:"SURICATA Modbus Data mismatch"; flow:to_client; app-layer-event:modbus.value_mismatch; classtype:protocol-command-decode; sid:2250008; rev:2;)
# Request Flood Detected
#alert modbus any any -> any any (msg:"SURICATA Modbus Request flood detected"; flow:to_server; app-layer-event:modbus.flooded; classtype:protocol-command-decode; sid:2250009; rev:2;)
#